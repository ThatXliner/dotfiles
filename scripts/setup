#!/usr/bin/env bash
# 1. Setup antidote
# 2. Setup P10k
# 4. Setup asdf
# 5. Setup brew

install_antidote() {
    git clone --depth=1 https://github.com/mattmc3/antidote.git ${ZDOTDIR:-$HOME}/.antidote
}
# setup_python() {
#     if command -v pyenv &> /dev/null
#     then
#         return
#     fi
#     brew install openssl readline sqlite3 xz zlib
#     curl -sSf https://pyenv.run | bash  # install pyenv
#     # XXX: How to reload shell?
#     szrc
#     # FIXME: No need for these CFLAGS, etc if we have the aliases.zsh loaded
#     CFLAGS="-I$(brew --prefix xz)/include" LDFLAGS="-L$(brew --prefix xz)/lib" PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.10.4
#     pyenv global 3.10.4
#     python -m ensurepip
#     install_pipx
# }
# setup_omz() {
#     if command -v omz &> /dev/null
#     then
#         return
#     fi
#     sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#     # TODO: Install custom plugins
# }

install_homebrew() {
    if command -v brew &> /dev/null
    then
        return
    fi
    echo "Installing homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> ~/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
}
setup_homebrew() {
    # brew update
    # (cd ~ && brew bundle install)
    brew install fzf zoxide rg fd xz  # xz for Python-build
    /opt/homebrew/opt/fzf/install
    # Maybe shell env needs to be in .zprofile
}
install_pipx() {
    if command -v pipx &> /dev/null
    then
        return
    fi
    pip install pipx
    pipx install pipx
    pip uninstall pipx --yes
}
setup_pipx() {
    cat $HOME/dotfiles/requirements.txt | xargs -n 1 pipx install
}
install_asdf() {
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.13.1
}
setup_asdf() {
    asdf plugin add python
    asdf install python latest
    asdf global python latest
    asdf install python latest:3.11  # For pipx for now

    asdf plugin add nodejs
    asdf install nodejs latest
    asdf global nodejs latest
}
setup_npm_stuff() {
    curl -fsSL https://get.pnpm.io/install.sh | sh -
    echo 'source "$HOME/dotfiles/zshrc/index.zsh"' > ~/.zshrc
    source ~/.zshrc
    pnpm install -g node-gyp
}
setup_vim() {
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    ln -s .vimrc ~/.vimrc
}
install_rust() {
    # Rustup > asdf
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}
setup_git() {
    # Aliases
    git config --global alias.aliases 'config --get-regexp alias'
    git config --global alias.abort-merge 'reset --hard HEAD'
    git config --global alias.uncommit 'reset --soft HEAD^'
    git config --global alias.unstage 'reset --'
    # alias.cleanup-branches !curl -s https://raw.githubusercontent.com/paulmillr/dotfiles/master/git-extras/git-cleanup.rb | ruby -
    # alias.reset-to-remote reset --hard @{u}
    # alias.l log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
}
main() {
    echo "Ok im not done yet"
    return
    touch ~/.hushlogin
    xcode-select --install || echo "Xcode already set up!"
    git clone --depth=1 https://github.com/ThatXliner/dotfiles.git ~/dotfiles
    install_asdf
    install_antidote
    install_homebrew
    setup_homebrew
    ln -s ~/dotfiles/prompts/multi.zsh ~/.p10k.zsh
    echo "source $HOME/dotfiles/zshrc/index.zsh" > ~/.zshrc
    source ~/.zshrc
    setup_asdf
    install_pipx
    setup_npm_stuff
    # TODO: asdf
}
main
